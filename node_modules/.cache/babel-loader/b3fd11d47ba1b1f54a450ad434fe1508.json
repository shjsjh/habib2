{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexports.__esModule = true;\n\nvar React = require(\"react\");\n\nvar ModalStyles_1 = require(\"./ModalStyles\");\n\nvar Modal =\n/** @class */\nfunction (_super) {\n  __extends(Modal, _super);\n\n  function Modal(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      modalAnimationTime: _this.setAnimationTime(),\n      buttonIsHovered: false,\n      modalClassName: ''\n    };\n    _this.buttonMouseOut = _this.buttonMouseOut.bind(_this);\n    _this.closeOnBgClick = _this.closeOnBgClick.bind(_this);\n    _this.mouseOverButton = _this.mouseOverButton.bind(_this);\n    _this.setAnimationTime = _this.setAnimationTime.bind(_this);\n    _this.toggleModalClass = _this.toggleModalClass.bind(_this);\n    _this.handleEscKey = _this.handleEscKey.bind(_this);\n    return _this;\n  }\n\n  Modal.prototype.componentDidUpdate = function (prevProps) {\n    var nextModalState = this.props.shouldShowModal;\n\n    if (prevProps.shouldShowModal !== nextModalState) {\n      if (this.props.shouldShowModal) {\n        window.addEventListener('keydown', this.handleEscKey);\n      } else {\n        window.removeEventListener('keydown', this.handleEscKey);\n      }\n\n      this.toggleModalClass(nextModalState);\n    }\n  };\n\n  Modal.prototype.handleEscKey = function (e) {\n    console.log(e.key);\n\n    if ((e === null || e === void 0 ? void 0 : e.key.toLowerCase()) === 'escape' || (e === null || e === void 0 ? void 0 : e.key.toLowerCase()) === 'esc') {\n      this.props.closeModal();\n    }\n  };\n\n  Modal.prototype.buttonMouseOut = function () {\n    this.setState({\n      buttonIsHovered: false\n    });\n  };\n\n  Modal.prototype.closeOnBgClick = function (e) {\n    var onlyCloseWithButton = this.props.onlyCloseWithButton;\n    var id = e.target.id;\n\n    if (onlyCloseWithButton || !id || id !== 'modal-modalBackground') {\n      return;\n    }\n\n    this.props.closeModal();\n  };\n\n  Modal.prototype.calculateBgStyle = function (modalBackground, modalBackgroundOpen, modalBackgroundTransition) {\n    var modalClassName = this.state.modalClassName;\n    var styleMap = {\n      open: modalBackgroundOpen,\n      transition: modalBackgroundTransition\n    };\n    var currentState = styleMap[modalClassName] || {};\n    return __assign(__assign({}, modalBackground), currentState);\n  };\n\n  Modal.prototype.calculateButtonStyle = function (closeButton, closeButtonHover, closeButtonText, hoveredButtonText) {\n    var buttonIsHovered = this.state.buttonIsHovered;\n    var button = buttonIsHovered ? __assign(__assign({}, closeButton), closeButtonHover) : closeButton;\n    var buttonText = buttonIsHovered ? __assign(__assign({}, closeButtonText), hoveredButtonText) : closeButtonText;\n    return {\n      button: button,\n      buttonText: buttonText\n    };\n  };\n\n  Modal.prototype.mergeStyles = function () {\n    var custom = this.props.customStyle;\n\n    var merged = __assign({}, ModalStyles_1.modalStyle);\n\n    for (var i in custom) {\n      if (custom.hasOwnProperty(i)) {\n        merged[i] = __assign(__assign({}, merged[i]), custom[i]);\n      }\n    } // set animation time\n\n\n    merged.modalBackground.transitionDuration = this.state.modalAnimationTime / 1000 + \"s\";\n    return merged;\n  };\n\n  Modal.prototype.mouseOverButton = function () {\n    this.setState({\n      buttonIsHovered: true\n    });\n  };\n\n  Modal.prototype.setAnimationTime = function () {\n    var customStyle = this.props.customStyle;\n\n    if (customStyle) {\n      if (customStyle.animationTime === 0 || customStyle.animationTime) {\n        return customStyle.animationTime;\n      }\n    }\n\n    return ModalStyles_1.modalStyle.animationTime;\n  };\n\n  Modal.prototype.toggleModalClass = function (shouldShowModal) {\n    var _this = this;\n\n    this.setState({\n      modalClassName: 'transition'\n    });\n    var modalAnimationTime = this.state.modalAnimationTime;\n    var minUpdateTime = 17;\n    var nextClass = shouldShowModal ? 'open' : '';\n    var timer = shouldShowModal ? minUpdateTime : modalAnimationTime;\n    setTimeout(function () {\n      return _this.setState({\n        modalClassName: nextClass\n      });\n    }, timer);\n  };\n\n  Modal.prototype.render = function () {\n    var mergedStyles = this.mergeStyles();\n    var closeButton = mergedStyles.closeButton,\n        closeButtonText = mergedStyles.closeButtonText,\n        closeButtonHover = mergedStyles.closeButtonHover,\n        hoveredButtonText = mergedStyles.hoveredButtonText,\n        modalBackground = mergedStyles.modalBackground,\n        modalBackgroundTransition = mergedStyles.modalBackgroundTransition,\n        modalBackgroundOpen = mergedStyles.modalBackgroundOpen,\n        modalBody = mergedStyles.modalBody,\n        modalHeader = mergedStyles.modalHeader,\n        modalInner = mergedStyles.modalInner,\n        modalTitle = mergedStyles.modalTitle;\n    var bgStyle = this.calculateBgStyle(modalBackground, modalBackgroundOpen, modalBackgroundTransition);\n\n    var _a = this.calculateButtonStyle(closeButton, closeButtonHover, closeButtonText, hoveredButtonText),\n        button = _a.button,\n        buttonText = _a.buttonText;\n\n    return React.createElement(\"div\", {\n      style: bgStyle,\n      id: \"modal-modalBackground\",\n      onClick: this.closeOnBgClick\n    }, React.createElement(\"div\", {\n      id: \"modal-modalInner\",\n      style: modalInner\n    }, React.createElement(\"div\", {\n      id: \"modal-modalHeader\",\n      style: modalHeader\n    }, React.createElement(\"div\", {\n      id: \"modal-modalTitle\",\n      style: modalTitle\n    }, this.props.title), React.createElement(\"div\", {\n      id: \"modal-closeButton\",\n      onClick: this.props.closeModal,\n      onMouseOut: this.buttonMouseOut,\n      onMouseOver: this.mouseOverButton,\n      style: button\n    }, React.createElement(\"span\", {\n      style: buttonText,\n      id: \"modal-closeButtonText\"\n    }, \"X\"))), React.createElement(\"div\", {\n      id: \"modal-modalBody\",\n      style: modalBody\n    }, this.props.children)));\n  };\n\n  Modal.defaultProps = {\n    customStyle: {}\n  };\n  return Modal;\n}(React.Component);\n\nexports[\"default\"] = Modal;","map":null,"metadata":{},"sourceType":"script"}