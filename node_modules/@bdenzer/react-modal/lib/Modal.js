"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var React = require("react");
var ModalStyles_1 = require("./ModalStyles");
var Modal = /** @class */ (function (_super) {
    __extends(Modal, _super);
    function Modal(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            modalAnimationTime: _this.setAnimationTime(),
            buttonIsHovered: false,
            modalClassName: ''
        };
        _this.buttonMouseOut = _this.buttonMouseOut.bind(_this);
        _this.closeOnBgClick = _this.closeOnBgClick.bind(_this);
        _this.mouseOverButton = _this.mouseOverButton.bind(_this);
        _this.setAnimationTime = _this.setAnimationTime.bind(_this);
        _this.toggleModalClass = _this.toggleModalClass.bind(_this);
        _this.handleEscKey = _this.handleEscKey.bind(_this);
        return _this;
    }
    Modal.prototype.componentDidUpdate = function (prevProps) {
        var nextModalState = this.props.shouldShowModal;
        if (prevProps.shouldShowModal !== nextModalState) {
            if (this.props.shouldShowModal) {
                window.addEventListener('keydown', this.handleEscKey);
            }
            else {
                window.removeEventListener('keydown', this.handleEscKey);
            }
            this.toggleModalClass(nextModalState);
        }
    };
    Modal.prototype.handleEscKey = function (e) {
        console.log(e.key);
        if ((e === null || e === void 0 ? void 0 : e.key.toLowerCase()) === 'escape' || (e === null || e === void 0 ? void 0 : e.key.toLowerCase()) === 'esc') {
            this.props.closeModal();
        }
    };
    Modal.prototype.buttonMouseOut = function () {
        this.setState({ buttonIsHovered: false });
    };
    Modal.prototype.closeOnBgClick = function (e) {
        var onlyCloseWithButton = this.props.onlyCloseWithButton;
        var id = e.target.id;
        if (onlyCloseWithButton || !id || id !== 'modal-modalBackground') {
            return;
        }
        this.props.closeModal();
    };
    Modal.prototype.calculateBgStyle = function (modalBackground, modalBackgroundOpen, modalBackgroundTransition) {
        var modalClassName = this.state.modalClassName;
        var styleMap = {
            open: modalBackgroundOpen,
            transition: modalBackgroundTransition
        };
        var currentState = styleMap[modalClassName] || {};
        return __assign(__assign({}, modalBackground), currentState);
    };
    Modal.prototype.calculateButtonStyle = function (closeButton, closeButtonHover, closeButtonText, hoveredButtonText) {
        var buttonIsHovered = this.state.buttonIsHovered;
        var button = buttonIsHovered
            ? __assign(__assign({}, closeButton), closeButtonHover) : closeButton;
        var buttonText = buttonIsHovered
            ? __assign(__assign({}, closeButtonText), hoveredButtonText) : closeButtonText;
        return { button: button, buttonText: buttonText };
    };
    Modal.prototype.mergeStyles = function () {
        var custom = this.props.customStyle;
        var merged = __assign({}, ModalStyles_1.modalStyle);
        for (var i in custom) {
            if (custom.hasOwnProperty(i)) {
                merged[i] = __assign(__assign({}, merged[i]), custom[i]);
            }
        }
        // set animation time
        merged.modalBackground.transitionDuration = this.state
            .modalAnimationTime / 1000 + "s";
        return merged;
    };
    Modal.prototype.mouseOverButton = function () {
        this.setState({ buttonIsHovered: true });
    };
    Modal.prototype.setAnimationTime = function () {
        var customStyle = this.props.customStyle;
        if (customStyle) {
            if (customStyle.animationTime === 0 || customStyle.animationTime) {
                return customStyle.animationTime;
            }
        }
        return ModalStyles_1.modalStyle.animationTime;
    };
    Modal.prototype.toggleModalClass = function (shouldShowModal) {
        var _this = this;
        this.setState({ modalClassName: 'transition' });
        var modalAnimationTime = this.state.modalAnimationTime;
        var minUpdateTime = 17;
        var nextClass = shouldShowModal ? 'open' : '';
        var timer = shouldShowModal ? minUpdateTime : modalAnimationTime;
        setTimeout(function () { return _this.setState({ modalClassName: nextClass }); }, timer);
    };
    Modal.prototype.render = function () {
        var mergedStyles = this.mergeStyles();
        var closeButton = mergedStyles.closeButton, closeButtonText = mergedStyles.closeButtonText, closeButtonHover = mergedStyles.closeButtonHover, hoveredButtonText = mergedStyles.hoveredButtonText, modalBackground = mergedStyles.modalBackground, modalBackgroundTransition = mergedStyles.modalBackgroundTransition, modalBackgroundOpen = mergedStyles.modalBackgroundOpen, modalBody = mergedStyles.modalBody, modalHeader = mergedStyles.modalHeader, modalInner = mergedStyles.modalInner, modalTitle = mergedStyles.modalTitle;
        var bgStyle = this.calculateBgStyle(modalBackground, modalBackgroundOpen, modalBackgroundTransition);
        var _a = this.calculateButtonStyle(closeButton, closeButtonHover, closeButtonText, hoveredButtonText), button = _a.button, buttonText = _a.buttonText;
        return (React.createElement("div", { style: bgStyle, id: "modal-modalBackground", onClick: this.closeOnBgClick },
            React.createElement("div", { id: "modal-modalInner", style: modalInner },
                React.createElement("div", { id: "modal-modalHeader", style: modalHeader },
                    React.createElement("div", { id: "modal-modalTitle", style: modalTitle }, this.props.title),
                    React.createElement("div", { id: "modal-closeButton", onClick: this.props.closeModal, onMouseOut: this.buttonMouseOut, onMouseOver: this.mouseOverButton, style: button },
                        React.createElement("span", { style: buttonText, id: "modal-closeButtonText" }, "X"))),
                React.createElement("div", { id: "modal-modalBody", style: modalBody }, this.props.children))));
    };
    Modal.defaultProps = {
        customStyle: {}
    };
    return Modal;
}(React.Component));
exports["default"] = Modal;
